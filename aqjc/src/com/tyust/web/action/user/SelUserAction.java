/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.tyust.web.action.user;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.json.JSONArray;
import org.json.JSONObject;

import com.opensymphony.xwork2.ActionContext;
import com.tyust.bean.user.TBaseUserInfo;
import com.tyust.common.CardID;
import com.tyust.common.CommonalityBean;
import com.tyust.common.DateHandler;
import com.tyust.service.user.UserService;
/**
 * MyEclipse Struts
 * Creation date: 07-09-2010
 *
 * XDoclet definition:
 * @struts.action path="/selUser" name="selUserForm" input="/form/selUser.jsp" parameter="param" scope="request" validate="true"
 */
public class SelUserAction{
	private UserService userService;
	/*
	 * Generated Methods
	 */

	public UserService getUserService() {
		return userService;
	}

	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	private int page;
	private int rp;
	private String unitid;
	private String sortname;
	private String sortorder;
	
	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public int getRp() {
		return rp;
	}

	public void setRp(int rp) {
		this.rp = rp;
	}

	public String getUnitid() {
		return unitid;
	}

	public void setUnitid(String unitid) {
		this.unitid = unitid;
	}

	public String getSortname() {
		return sortname;
	}

	public void setSortname(String sortname) {
		this.sortname = sortname;
	}

	public String getSortorder() {
		return sortorder;
	}

	public void setSortorder(String sortorder) {
		this.sortorder = sortorder;
	}

	public String selectUserByUnitId(){
		HttpServletRequest request=ServletActionContext.getRequest();
		String unitId = request.getParameter("unitId");
		try {
			ServletActionContext.getResponse().getWriter().print(userService.selectUserByUnitId(unitId));
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}
	//显示用户
	public String selAllUser(){
		ActionContext ctx = ActionContext.getContext();
		HttpServletRequest request=ServletActionContext.getRequest();
//		int pagec = Integer.parseInt(request.getParameter("page")) ; //当前页
//		int pagesize = Integer.parseInt(request.getParameter("rp")) ;//每页显示记		
//		int ystart=1;
//		if(page!=1){
//			ystart = (page-1)*rp+1;
//		}
		int ystart = (page-1)*rp;
		int yend = page*rp; //
		CommonalityBean comm = new CommonalityBean();
		comm.setStart(ystart);
		comm.setEnd(yend);
		//comm.setId(request.getParameter("unitid"));
		String sortname = request.getParameter("sortname");
		comm.setId(unitid);
		HashMap map = new HashMap();
		map.put("lastLoginTime", "LAST_LOGIN_TIME");
		map.put("userId", "USER_ID");
		map.put("userName", "USER_NAME");
		map.put("sex", "SEX");
		map.put("birthday", "BIRTHDAY");
		map.put("duty", "DUTY");
		map.put("tecduty", "TECDUTY");
		map.put("telephone", "TELEPHONE");
		map.put("email", "EMAIL");
		map.put("cardId", "CARD_ID");
		map.put("name", "NAME");
		map.put("mobile", "MOBILE");
		map.put("createTime", "CREATE_TIME");
		map.put("userComment", "USER_COMMENT");
		map.put("unitId", "UNIT_ID");
		map.put("inuse", "INUSE");
		map.put("createUnitId", "CREATE_ID");
		comm.setSortname(map.get(sortname).toString());
		comm.setSortorder(sortorder);
		comm.setLimit(rp);
		String unitId = comm.getId();
		int count = userService.selectUserAllCount(unitId);
		if(unitId==null){
			TBaseUserInfo currUser = (TBaseUserInfo)ctx.getSession().get("user");
			unitId = currUser.getUnitId();
		}
		List list = userService.selectUserInfo(comm);

		TBaseUserInfo userinfo = new TBaseUserInfo();
	    JSONArray jsonarraylist = new JSONArray();
	    JSONObject json2 =  new JSONObject();
	    	   try {
	    		   if(list!=null){
		    		   for(int i=0;i<list.size();i++){
		    	    	   userinfo = (TBaseUserInfo)list.get(i);
		    	    	   JSONObject json = new JSONObject();
		    	    	   if(!"0".equals(userinfo.getCreateUnitId())){
			    	    	   json.put("userId",userinfo.getUserId());
			    	    	   json.put("userName", userinfo.getUserName());
			    	    	   if(userinfo.getSex().equals("0")){
			    	    		   json.put("sex", "男");
			    	    	   }else{
			    	    		   json.put("sex", "女");
			    	    	   }
			    	    	   json.put("sexCode", userinfo.getSex());
			    	    	   json.put("unitId",userinfo.getUnitId());
			    	    	   if(userinfo.getInuse()==1){
			    	    		   json.put("inuse", "启用");
			    	    	   }else{
			    	    		   json.put("inuse", "停用");
			    	    	   }
			    	    	   json.put("inuseCode", userinfo.getInuse());
			    	    	   json.put("duty",userinfo.getDuty());			    	    	 	
			    	    	   json.put("telephone",userinfo.getTelephone());
			    	    	   json.put("email",userinfo.getEmail());			    	    	 		    	    	  
			    	    	   json.put("name",userinfo.getName());		    	    	 
			    	    	   json.put("createTime",DateHandler.dateToString(userinfo.getCreateTime()));
			    	    	   json.put("userComment",userinfo.getUserComment());
			    	    	   if(userinfo.getLastLoginTime()==null){
		                            json.put("lastLoginTime", "新用户，未登录过");
			    	    	   }else{
			    	    		   json.put("lastLoginTime",DateHandler.dateToString(userinfo.getLastLoginTime(),"yyyy-MM-dd HH:mm:ss"));
			    	    	   }
			    	    	   if(userinfo.getRoleId()==null){
			    	    		   json.put("roleId", "未分配");
			    	    	   }else{
			    	    		   json.put("roleId", userinfo.getRoleId());
			    	    	   }
			    	    	   jsonarraylist.put(json);
		    	    	   }   
		    	       }
	    		   }
	    		   json2.put("rows", jsonarraylist);
	    		   json2.put("total", count);
	    		   json2.put("page", page);
	    		   
	    		   ServletActionContext.getResponse().getWriter().write(json2.toString());

				   return null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		return null;
	}

	/**
	 * 判断用户名是否存在
	 * @throws IOException 
	 */
	public String userIsExist() throws IOException{
		ActionContext ctx = ActionContext.getContext();
		
		String username = ServletActionContext.getRequest().getParameter("userIsExistParamValue").trim();
		
		PrintWriter out = ServletActionContext.getResponse().getWriter();
		boolean flag = true;
			flag = !userService.selectUserIsExist(username.trim().toLowerCase());
			out.print(flag);
		return null;
	}
	/**
	 * 验证身份证是否正确
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException 
	 */
	public String isCardId() throws IOException{
		    String cardId = ServletActionContext.getRequest().getParameter("cardId").trim();
		    PrintWriter out = ServletActionContext.getResponse().getWriter();
		    boolean flag = false;
		    //CardID.isCardID(cardId)=0时，是今年出生的人 若返回值<0,身份证不正确----修改条件
		    if(CardID.isCardID(cardId)>=0){
		    	flag = true;
		    }
		    
//		    if(cardId.length()==18&&CardID.isBirthday(cardId)&&CardID.checkCardID(cardId)){
//		    	flag=true;
//		    }
		    out.print(flag);
		    
		return null;
	}
}