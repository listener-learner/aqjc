package com.tyust.dao.pbs;

import com.tyust.bean.app.InstrumentInfo;
import com.tyust.bean.pbs.PbsTestDatas;
import com.tyust.bean.pbs.PbsTestInstrument;
import com.tyust.bean.pbs.PbsTestReport;
import com.tyust.bean.pbs.PbsTestReportExample;
import java.util.List;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

public class PbsTestReportDAOImpl extends SqlMapClientDaoSupport implements PbsTestReportDAO {

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public PbsTestReportDAOImpl() {
        super();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int countByExample(PbsTestReportExample example) {
        Integer count = (Integer)  getSqlMapClientTemplate().queryForObject("PBS_TEST_REPORT.ibatorgenerated_countByExample", example);
        return count;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int deleteByExample(PbsTestReportExample example) {
        int rows = getSqlMapClientTemplate().delete("PBS_TEST_REPORT.ibatorgenerated_deleteByExample", example);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int deleteByPrimaryKey(String pbsTestReportId) {
        PbsTestReport key = new PbsTestReport();
        key.setPbsTestReportId(pbsTestReportId);
        int rows = getSqlMapClientTemplate().delete("PBS_TEST_REPORT.ibatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public void insert(PbsTestReport record) {
        getSqlMapClientTemplate().insert("PBS_TEST_REPORT.ibatorgenerated_insert", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public void insertSelective(PbsTestReport record) {
        getSqlMapClientTemplate().insert("PBS_TEST_REPORT.ibatorgenerated_insertSelective", record);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    @SuppressWarnings("unchecked")
    public List<PbsTestReport> selectByExample(PbsTestReportExample example) {
        List<PbsTestReport> list = getSqlMapClientTemplate().queryForList("PBS_TEST_REPORT.ibatorgenerated_selectByExample", example);
        return list;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public PbsTestReport selectByPrimaryKey(String pbsTestReportId) {
        PbsTestReport key = new PbsTestReport();
        key.setPbsTestReportId(pbsTestReportId);
        PbsTestReport record = (PbsTestReport) getSqlMapClientTemplate().queryForObject("PBS_TEST_REPORT.ibatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int updateByExampleSelective(PbsTestReport record, PbsTestReportExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("PBS_TEST_REPORT.ibatorgenerated_updateByExampleSelective", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int updateByExample(PbsTestReport record, PbsTestReportExample example) {
        UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
        int rows = getSqlMapClientTemplate().update("PBS_TEST_REPORT.ibatorgenerated_updateByExample", parms);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int updateByPrimaryKeySelective(PbsTestReport record) {
        int rows = getSqlMapClientTemplate().update("PBS_TEST_REPORT.ibatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    public int updateByPrimaryKey(PbsTestReport record) {
        int rows = getSqlMapClientTemplate().update("PBS_TEST_REPORT.ibatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table PBS_TEST_REPORT
     *
     * @ibatorgenerated
     */
    private static class UpdateByExampleParms extends PbsTestReportExample {
        private Object record;

        public UpdateByExampleParms(Object record, PbsTestReportExample example) {
            super(example);
            this.record = record;
        }

        public Object getRecord() {
            return record;
        }
    }
    
    
    /******ll 增加的方法 S******/
    //获取屏蔽室检测报告编号用于生成新的检测报告编号
	@Override
	public String getPbsTestReportNumber() {
		String num = (String) getSqlMapClientTemplate().queryForObject("PBS_TEST_REPORT.ibatorgenerated_selectPbsNum");
		return num;
	}
	
	//根据屏蔽室检测ID删除屏蔽室检测仪器表中的信息
	@Override
	public int deleteTestInsByReportId(String pbsReportId) {
		int rows = getSqlMapClientTemplate().delete("PBS_TEST_REPORT.deleteTestInsByReportId", pbsReportId);
		return rows;
	}
	
	//向屏蔽室检测仪器表中插入数据
	@Override
	public void insertTestInstrument(PbsTestInstrument pbsTestInstrument) {		
		getSqlMapClientTemplate().insert("PBS_TEST_REPORT.insertTestInstrument", pbsTestInstrument);
	}
	
	//根据屏蔽室检测编号删除屏蔽室检测数据表中的信息
	@Override
	public int deleteTestDatasByReportId(String pbsReportId) {
		int rows = getSqlMapClientTemplate().delete("PBS_TEST_REPORT.deleteTestDatasByReportId", pbsReportId);
		return rows;
	}
	
	//向屏蔽室检测数据表中插入数据
	@Override
	public void insertTestDatas(PbsTestDatas pbsTestDatas) {
		getSqlMapClientTemplate().insert("PBS_TEST_REPORT.insertTestDatas", pbsTestDatas);
	}
	
	//根据检测报告ID查询屏蔽室检测仪器信息
	@Override
	public List<InstrumentInfo> getPbsInsInfoListByReportId(String testReportId) {
		List<InstrumentInfo> list = (List<InstrumentInfo>) getSqlMapClientTemplate().queryForList("PBS_TEST_REPORT.getPbsInsInfoListByReportId",testReportId);
		return list;
	}
	
	//根据检测报告ID查询屏蔽室检测数据信息
	@Override
	public List<PbsTestDatas> getPbsTestDatasByReportId(String testReportId) {
		List<PbsTestDatas> list = (List<PbsTestDatas>) getSqlMapClientTemplate().queryForList("PBS_TEST_REPORT.getPbsTestDatasByReportId",testReportId);
		return list;
	}
	
	//根据申请ID查询屏蔽室申请单位信息
	@Override
	public String getPbsApplyUnitNameByApplyId(String applyId) {		
		return (String) getSqlMapClientTemplate().queryForObject("PBS_TEST_REPORT.getPbsApplyUnitNameByApplyId",applyId);
	}

	
}